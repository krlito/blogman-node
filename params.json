{"name":"Blogman","body":"Blogman is an easy-to-use blog engine made for node.js platform. You only need to write your \r\narticles/posts in markdown, put them in the posts folder and blogman will process them to be shown \r\non your website.\r\n\r\nThis module is intended to be used in personal developers blogs. A working example can be seen in \r\n[my blog][carlos-blog]. This blog engine is in alpha state because it still does not have all the \r\ndesired features. Anyway, it is fully operational as it is right now.\r\n\r\n\r\n##Requirements\r\n\r\nBlogman depens on [filemonitor-node], which depends on [inotify-tools]. To install inotify-tools \r\non a Linux (Debian/Ubuntu) system:\r\n\r\n    sudo apt-get install inotify-tools\r\n\r\nFor installing on other linux flavors, go [here][getting-inotify-tools].\r\n\r\n\r\n##Installation\r\n\r\nOnce [inotify-tools] is installed. On your project directory:\r\n\r\n    npm install blogman\r\n\r\n\r\n##Usage\r\n\r\nBlogman has two operation modes as described in the following sub-sections.\r\n\r\n\r\n### Express integration mode\r\n\r\nFor using blogman with [express], you just configure it passing the express application object.\r\nAlso, you can pass an optional settings object as it is shown in the next example. Any setting not\r\nset in the settings object will take a default value. Default values are the same shown in the\r\nexample, e.g. default `encoding` value is \"utf8\".\r\n\r\n```javascript\r\n    var express = require('express'),\r\n      blogman = require('blogman'),\r\n      app = express.createServer();\r\n\r\n    //... some express configuration code\r\n\r\n    //Routes\r\n\r\n    blogman.configure(app, {\r\n      route: \"/blog\",\r\n      blogdir: \"./blog/\",\r\n      encoding: \"utf8\",\r\n      postsPerPage: 5\r\n    });\r\n    //app.get...\r\n    //Other routes\r\n```\r\n\r\nIf you want to use default setting values, you could just invoke `blogman.configure(app);`.\r\nIn the example, full method arguments were used for demostration purposes.\r\n\r\n\r\n#### So what blogman does is...\r\n\r\nAssuming you use default settings as in the previous example. Postman will capture two routes:\r\n- GET http://yoursite/blog(/:page)?\r\n- GET http://yoursite/blog/post/:id\r\n\r\nThe first route is for showing your post list in a paginated way. The number of posts shown \r\nper page is defined by property `postsPerPage`. The second route will be used for accessing \r\nan specific article. For rendering these pages, blogman will use `blog` and `blogpost` \r\nviews in your express project. These two views MUST exist.\r\n\r\nBlogman will look for markdown files in the `./blog/posts/` folder. These files will be read \r\nusing the defined encoding. They will be parsed and processed so they can be shown when they are\r\nrequested.\r\n\r\nA blogman example markdown file format is:\r\n\r\n    title: My First Post\r\n    author: John Doe\r\n    date: 01 May 2011 16:30:00 -0500\r\n\r\n    This is my first post for blogman blog engine.\r\n    \r\n    Here there is another paragraph.\r\n\r\nAs you can see, blogman markdown files should have a special header with metadata for the post. \r\nIt is recommended to use at least these three properties (`title`, `author` and `date`). Anyway, \r\nyou could set any property you desire in the header like `keywords` or `location`. Header goes \r\nfrom the beginning of the file until the first blank line is found.\r\n\r\nNotes:\r\n- `date` is a very important property because posts are ordered using this criteria. Be careful \r\nto use a valid javascript date string format as in the example. \r\n- There is an `id` property which uniquely identifies a post. It is set to be the filename\r\nwithout `.markdown` extension. Do NOT declare this property inside the file.\r\n- Each time an article file is put in the `./blog/posts` folder, it will be added to the \r\nwebsite without doing anything else.\r\n\r\n\r\n#### To render...\r\n\r\nAs stated previously, renderization is done using views `blog` and `blogpost` of the express \r\nproject. `blog` is used when a list of posts is to be rendered and `blogpost` is used when only \r\none post is going to be shown. In the latter case, the view will receive an object called `post`\r\nwith all the properties in the header of the post. `post` also have a `content` property with \r\nthe HTML of the post content. If using jade, a view could be like this:\r\n\r\n```jade\r\n    .blog-post\r\n     .blog-post-title\r\n       h2= post.title\r\n       p by <b>#{post.author}</b> on #{post.date}\r\n     .blog-post-content\r\n       != post.content\r\n```\r\n\r\nFor the `blog` view (list of posts) case, you will receive a `posts` array. Then, you could do:\r\n\r\n```jade\r\n    .content-title\r\n      h1 Blog Articles\r\n    .blog-list\r\n      each post in posts\r\n        .blog-li\r\n          .blog-li-title\r\n            h2\r\n              a(href='/blog/post/#{post.id}')= post.title\r\n            small= post.date\r\n          .blog-li-preview\r\n            != post.preview\r\n          a.btn.btn-primary(href='/blog/post/#{post.id}') Read more...\r\n    .pagination.pagination-centered\r\n      ul\r\n        - for(var i=1; i <= posts.pageCount; i++)\r\n          if i!==posts.page\r\n            li\r\n              a(href='/blog/#{i}')= i\r\n          else\r\n            li.active\r\n              a= i\r\n```\r\n\r\nIn this example, you can see `posts` array has a `page` property to indicate the current page. \r\nAlso, each element of the array has a `preview` which is an HTML fragment of the full post content.\r\n\r\n\r\n### Post/Article manager mode\r\n\r\nIn this mode, you can configure Blogman passing `null` instead of an application object. In this\r\ncase Blogman interface exposes methods `post(:id, callback(err, post))` and\r\n`posts(:page, callback(err, posts)` which will respectively return one and many posts objects so\r\nyou can use them as you like. This objects are the same that would be passed to the views in the\r\n*express integration mode*.\r\n\r\n```javascript\r\n    var blogman = require('blogman');\r\n    blogman.configure(null);\r\n    \r\n    blogman.post('welcome', function(err, postData) {\r\n      if(err) { return; };\r\n      console.log(postData.title);\r\n      console.log(postData.content);\r\n    });\r\n```\r\n\r\n##ToDo\r\nAs stated previously, Blogman in in alpha stage. Features planned to be added soon are:\r\n- Automatic syntax highlighting.\r\n- Support for comments. \r\n- Support for RSS.\r\n- Better layouts/views management support.\r\n\r\n[carlos-blog]: http://campo.com.co/blog\r\n[filemonitor-node]: http://github.com/krlito/filemonitor-node\r\n[inotifywait]: http://github.com/rvoicilas/inotify-tools/wiki\r\n[inotify-tools]: http://github.com/rvoicilas/inotify-tools/wiki\r\n[express]: http://github.com/visionmedia/express/ \r\n[getting-inotify-tools]: http://github.com/rvoicilas/inotify-tools/wiki/#wiki-getting\r\n","tagline":"An easy-to-use blog engine for developers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}